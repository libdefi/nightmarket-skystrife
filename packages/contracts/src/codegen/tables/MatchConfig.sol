// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct MatchConfigData {
  uint256 registrationTime;
  uint256 startTime;
  uint256 turnLength;
  bytes32 levelId;
  bytes32 createdBy;
  address escrowContract;
}

library MatchConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "MatchConfig", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004d61746368436f6e6669670000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00b4060020202020201400000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, bytes32, bytes32, address)
  Schema constant _valueSchema = Schema.wrap(0x00b406001f1f1f5f5f6100000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "matchEntity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "registrationTime";
    fieldNames[1] = "startTime";
    fieldNames[2] = "turnLength";
    fieldNames[3] = "levelId";
    fieldNames[4] = "createdBy";
    fieldNames[5] = "escrowContract";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get registrationTime.
   */
  function getRegistrationTime(bytes32 matchEntity) internal view returns (uint256 registrationTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get registrationTime.
   */
  function _getRegistrationTime(bytes32 matchEntity) internal view returns (uint256 registrationTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set registrationTime.
   */
  function setRegistrationTime(bytes32 matchEntity, uint256 registrationTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((registrationTime)), _fieldLayout);
  }

  /**
   * @notice Set registrationTime.
   */
  function _setRegistrationTime(bytes32 matchEntity, uint256 registrationTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((registrationTime)), _fieldLayout);
  }

  /**
   * @notice Get startTime.
   */
  function getStartTime(bytes32 matchEntity) internal view returns (uint256 startTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get startTime.
   */
  function _getStartTime(bytes32 matchEntity) internal view returns (uint256 startTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set startTime.
   */
  function setStartTime(bytes32 matchEntity, uint256 startTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startTime)), _fieldLayout);
  }

  /**
   * @notice Set startTime.
   */
  function _setStartTime(bytes32 matchEntity, uint256 startTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startTime)), _fieldLayout);
  }

  /**
   * @notice Get turnLength.
   */
  function getTurnLength(bytes32 matchEntity) internal view returns (uint256 turnLength) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get turnLength.
   */
  function _getTurnLength(bytes32 matchEntity) internal view returns (uint256 turnLength) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set turnLength.
   */
  function setTurnLength(bytes32 matchEntity, uint256 turnLength) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((turnLength)), _fieldLayout);
  }

  /**
   * @notice Set turnLength.
   */
  function _setTurnLength(bytes32 matchEntity, uint256 turnLength) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((turnLength)), _fieldLayout);
  }

  /**
   * @notice Get levelId.
   */
  function getLevelId(bytes32 matchEntity) internal view returns (bytes32 levelId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get levelId.
   */
  function _getLevelId(bytes32 matchEntity) internal view returns (bytes32 levelId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set levelId.
   */
  function setLevelId(bytes32 matchEntity, bytes32 levelId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((levelId)), _fieldLayout);
  }

  /**
   * @notice Set levelId.
   */
  function _setLevelId(bytes32 matchEntity, bytes32 levelId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((levelId)), _fieldLayout);
  }

  /**
   * @notice Get createdBy.
   */
  function getCreatedBy(bytes32 matchEntity) internal view returns (bytes32 createdBy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get createdBy.
   */
  function _getCreatedBy(bytes32 matchEntity) internal view returns (bytes32 createdBy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set createdBy.
   */
  function setCreatedBy(bytes32 matchEntity, bytes32 createdBy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((createdBy)), _fieldLayout);
  }

  /**
   * @notice Set createdBy.
   */
  function _setCreatedBy(bytes32 matchEntity, bytes32 createdBy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((createdBy)), _fieldLayout);
  }

  /**
   * @notice Get escrowContract.
   */
  function getEscrowContract(bytes32 matchEntity) internal view returns (address escrowContract) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get escrowContract.
   */
  function _getEscrowContract(bytes32 matchEntity) internal view returns (address escrowContract) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set escrowContract.
   */
  function setEscrowContract(bytes32 matchEntity, address escrowContract) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((escrowContract)), _fieldLayout);
  }

  /**
   * @notice Set escrowContract.
   */
  function _setEscrowContract(bytes32 matchEntity, address escrowContract) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((escrowContract)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 matchEntity) internal view returns (MatchConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 matchEntity) internal view returns (MatchConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 matchEntity,
    uint256 registrationTime,
    uint256 startTime,
    uint256 turnLength,
    bytes32 levelId,
    bytes32 createdBy,
    address escrowContract
  ) internal {
    bytes memory _staticData = encodeStatic(
      registrationTime,
      startTime,
      turnLength,
      levelId,
      createdBy,
      escrowContract
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 matchEntity,
    uint256 registrationTime,
    uint256 startTime,
    uint256 turnLength,
    bytes32 levelId,
    bytes32 createdBy,
    address escrowContract
  ) internal {
    bytes memory _staticData = encodeStatic(
      registrationTime,
      startTime,
      turnLength,
      levelId,
      createdBy,
      escrowContract
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 matchEntity, MatchConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.registrationTime,
      _table.startTime,
      _table.turnLength,
      _table.levelId,
      _table.createdBy,
      _table.escrowContract
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 matchEntity, MatchConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.registrationTime,
      _table.startTime,
      _table.turnLength,
      _table.levelId,
      _table.createdBy,
      _table.escrowContract
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 registrationTime,
      uint256 startTime,
      uint256 turnLength,
      bytes32 levelId,
      bytes32 createdBy,
      address escrowContract
    )
  {
    registrationTime = (uint256(Bytes.getBytes32(_blob, 0)));

    startTime = (uint256(Bytes.getBytes32(_blob, 32)));

    turnLength = (uint256(Bytes.getBytes32(_blob, 64)));

    levelId = (Bytes.getBytes32(_blob, 96));

    createdBy = (Bytes.getBytes32(_blob, 128));

    escrowContract = (address(Bytes.getBytes20(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (MatchConfigData memory _table) {
    (
      _table.registrationTime,
      _table.startTime,
      _table.turnLength,
      _table.levelId,
      _table.createdBy,
      _table.escrowContract
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 registrationTime,
    uint256 startTime,
    uint256 turnLength,
    bytes32 levelId,
    bytes32 createdBy,
    address escrowContract
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(registrationTime, startTime, turnLength, levelId, createdBy, escrowContract);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 registrationTime,
    uint256 startTime,
    uint256 turnLength,
    bytes32 levelId,
    bytes32 createdBy,
    address escrowContract
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      registrationTime,
      startTime,
      turnLength,
      levelId,
      createdBy,
      escrowContract
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 matchEntity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    return _keyTuple;
  }
}
