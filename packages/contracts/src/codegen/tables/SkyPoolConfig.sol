// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct SkyPoolConfigData {
  bool locked;
  uint256 cost;
  uint256 window;
  address orbToken;
  address seasonPassToken;
  address skyKeyToken;
}

library SkyPoolConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "SkyPoolConfig", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000536b79506f6f6c436f6e666967000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x007d060001202014141400000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, uint256, uint256, address, address, address)
  Schema constant _valueSchema = Schema.wrap(0x007d0600601f1f61616100000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "locked";
    fieldNames[1] = "cost";
    fieldNames[2] = "window";
    fieldNames[3] = "orbToken";
    fieldNames[4] = "seasonPassToken";
    fieldNames[5] = "skyKeyToken";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get locked.
   */
  function getLocked() internal view returns (bool locked) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get locked.
   */
  function _getLocked() internal view returns (bool locked) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set locked.
   */
  function setLocked(bool locked) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((locked)), _fieldLayout);
  }

  /**
   * @notice Set locked.
   */
  function _setLocked(bool locked) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((locked)), _fieldLayout);
  }

  /**
   * @notice Get cost.
   */
  function getCost() internal view returns (uint256 cost) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cost.
   */
  function _getCost() internal view returns (uint256 cost) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cost.
   */
  function setCost(uint256 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((cost)), _fieldLayout);
  }

  /**
   * @notice Set cost.
   */
  function _setCost(uint256 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((cost)), _fieldLayout);
  }

  /**
   * @notice Get window.
   */
  function getWindow() internal view returns (uint256 window) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get window.
   */
  function _getWindow() internal view returns (uint256 window) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set window.
   */
  function setWindow(uint256 window) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((window)), _fieldLayout);
  }

  /**
   * @notice Set window.
   */
  function _setWindow(uint256 window) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((window)), _fieldLayout);
  }

  /**
   * @notice Get orbToken.
   */
  function getOrbToken() internal view returns (address orbToken) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get orbToken.
   */
  function _getOrbToken() internal view returns (address orbToken) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set orbToken.
   */
  function setOrbToken(address orbToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((orbToken)), _fieldLayout);
  }

  /**
   * @notice Set orbToken.
   */
  function _setOrbToken(address orbToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((orbToken)), _fieldLayout);
  }

  /**
   * @notice Get seasonPassToken.
   */
  function getSeasonPassToken() internal view returns (address seasonPassToken) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get seasonPassToken.
   */
  function _getSeasonPassToken() internal view returns (address seasonPassToken) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set seasonPassToken.
   */
  function setSeasonPassToken(address seasonPassToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((seasonPassToken)), _fieldLayout);
  }

  /**
   * @notice Set seasonPassToken.
   */
  function _setSeasonPassToken(address seasonPassToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((seasonPassToken)), _fieldLayout);
  }

  /**
   * @notice Get skyKeyToken.
   */
  function getSkyKeyToken() internal view returns (address skyKeyToken) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get skyKeyToken.
   */
  function _getSkyKeyToken() internal view returns (address skyKeyToken) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set skyKeyToken.
   */
  function setSkyKeyToken(address skyKeyToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((skyKeyToken)), _fieldLayout);
  }

  /**
   * @notice Set skyKeyToken.
   */
  function _setSkyKeyToken(address skyKeyToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((skyKeyToken)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (SkyPoolConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (SkyPoolConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bool locked,
    uint256 cost,
    uint256 window,
    address orbToken,
    address seasonPassToken,
    address skyKeyToken
  ) internal {
    bytes memory _staticData = encodeStatic(locked, cost, window, orbToken, seasonPassToken, skyKeyToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bool locked,
    uint256 cost,
    uint256 window,
    address orbToken,
    address seasonPassToken,
    address skyKeyToken
  ) internal {
    bytes memory _staticData = encodeStatic(locked, cost, window, orbToken, seasonPassToken, skyKeyToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(SkyPoolConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.locked,
      _table.cost,
      _table.window,
      _table.orbToken,
      _table.seasonPassToken,
      _table.skyKeyToken
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(SkyPoolConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.locked,
      _table.cost,
      _table.window,
      _table.orbToken,
      _table.seasonPassToken,
      _table.skyKeyToken
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (bool locked, uint256 cost, uint256 window, address orbToken, address seasonPassToken, address skyKeyToken)
  {
    locked = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    cost = (uint256(Bytes.getBytes32(_blob, 1)));

    window = (uint256(Bytes.getBytes32(_blob, 33)));

    orbToken = (address(Bytes.getBytes20(_blob, 65)));

    seasonPassToken = (address(Bytes.getBytes20(_blob, 85)));

    skyKeyToken = (address(Bytes.getBytes20(_blob, 105)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (SkyPoolConfigData memory _table) {
    (
      _table.locked,
      _table.cost,
      _table.window,
      _table.orbToken,
      _table.seasonPassToken,
      _table.skyKeyToken
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool locked,
    uint256 cost,
    uint256 window,
    address orbToken,
    address seasonPassToken,
    address skyKeyToken
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(locked, cost, window, orbToken, seasonPassToken, skyKeyToken);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool locked,
    uint256 cost,
    uint256 window,
    address orbToken,
    address seasonPassToken,
    address skyKeyToken
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(locked, cost, window, orbToken, seasonPassToken, skyKeyToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
