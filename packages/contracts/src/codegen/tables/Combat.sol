// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { CombatArchetypes } from "./../common.sol";

struct CombatData {
  int32 health;
  int32 maxHealth;
  int32 strength;
  int32 counterStrength;
  int32 minRange;
  int32 maxRange;
  CombatArchetypes archetype;
}

library Combat {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Combat", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000436f6d62617400000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0019070004040404040401000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32)
  Schema constant _keySchema = Schema.wrap(0x004002005f5f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (int32, int32, int32, int32, int32, int32, uint8)
  Schema constant _valueSchema = Schema.wrap(0x0019070023232323232300000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "matchEntity";
    keyNames[1] = "entity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "health";
    fieldNames[1] = "maxHealth";
    fieldNames[2] = "strength";
    fieldNames[3] = "counterStrength";
    fieldNames[4] = "minRange";
    fieldNames[5] = "maxRange";
    fieldNames[6] = "archetype";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get health.
   */
  function getHealth(bytes32 matchEntity, bytes32 entity) internal view returns (int32 health) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get health.
   */
  function _getHealth(bytes32 matchEntity, bytes32 entity) internal view returns (int32 health) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set health.
   */
  function setHealth(bytes32 matchEntity, bytes32 entity, int32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((health)), _fieldLayout);
  }

  /**
   * @notice Set health.
   */
  function _setHealth(bytes32 matchEntity, bytes32 entity, int32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((health)), _fieldLayout);
  }

  /**
   * @notice Get maxHealth.
   */
  function getMaxHealth(bytes32 matchEntity, bytes32 entity) internal view returns (int32 maxHealth) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get maxHealth.
   */
  function _getMaxHealth(bytes32 matchEntity, bytes32 entity) internal view returns (int32 maxHealth) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set maxHealth.
   */
  function setMaxHealth(bytes32 matchEntity, bytes32 entity, int32 maxHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((maxHealth)), _fieldLayout);
  }

  /**
   * @notice Set maxHealth.
   */
  function _setMaxHealth(bytes32 matchEntity, bytes32 entity, int32 maxHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((maxHealth)), _fieldLayout);
  }

  /**
   * @notice Get strength.
   */
  function getStrength(bytes32 matchEntity, bytes32 entity) internal view returns (int32 strength) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get strength.
   */
  function _getStrength(bytes32 matchEntity, bytes32 entity) internal view returns (int32 strength) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set strength.
   */
  function setStrength(bytes32 matchEntity, bytes32 entity, int32 strength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((strength)), _fieldLayout);
  }

  /**
   * @notice Set strength.
   */
  function _setStrength(bytes32 matchEntity, bytes32 entity, int32 strength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((strength)), _fieldLayout);
  }

  /**
   * @notice Get counterStrength.
   */
  function getCounterStrength(bytes32 matchEntity, bytes32 entity) internal view returns (int32 counterStrength) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get counterStrength.
   */
  function _getCounterStrength(bytes32 matchEntity, bytes32 entity) internal view returns (int32 counterStrength) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set counterStrength.
   */
  function setCounterStrength(bytes32 matchEntity, bytes32 entity, int32 counterStrength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((counterStrength)), _fieldLayout);
  }

  /**
   * @notice Set counterStrength.
   */
  function _setCounterStrength(bytes32 matchEntity, bytes32 entity, int32 counterStrength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((counterStrength)), _fieldLayout);
  }

  /**
   * @notice Get minRange.
   */
  function getMinRange(bytes32 matchEntity, bytes32 entity) internal view returns (int32 minRange) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get minRange.
   */
  function _getMinRange(bytes32 matchEntity, bytes32 entity) internal view returns (int32 minRange) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set minRange.
   */
  function setMinRange(bytes32 matchEntity, bytes32 entity, int32 minRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((minRange)), _fieldLayout);
  }

  /**
   * @notice Set minRange.
   */
  function _setMinRange(bytes32 matchEntity, bytes32 entity, int32 minRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((minRange)), _fieldLayout);
  }

  /**
   * @notice Get maxRange.
   */
  function getMaxRange(bytes32 matchEntity, bytes32 entity) internal view returns (int32 maxRange) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get maxRange.
   */
  function _getMaxRange(bytes32 matchEntity, bytes32 entity) internal view returns (int32 maxRange) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set maxRange.
   */
  function setMaxRange(bytes32 matchEntity, bytes32 entity, int32 maxRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((maxRange)), _fieldLayout);
  }

  /**
   * @notice Set maxRange.
   */
  function _setMaxRange(bytes32 matchEntity, bytes32 entity, int32 maxRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((maxRange)), _fieldLayout);
  }

  /**
   * @notice Get archetype.
   */
  function getArchetype(bytes32 matchEntity, bytes32 entity) internal view returns (CombatArchetypes archetype) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return CombatArchetypes(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get archetype.
   */
  function _getArchetype(bytes32 matchEntity, bytes32 entity) internal view returns (CombatArchetypes archetype) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return CombatArchetypes(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set archetype.
   */
  function setArchetype(bytes32 matchEntity, bytes32 entity, CombatArchetypes archetype) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked(uint8(archetype)), _fieldLayout);
  }

  /**
   * @notice Set archetype.
   */
  function _setArchetype(bytes32 matchEntity, bytes32 entity, CombatArchetypes archetype) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked(uint8(archetype)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 matchEntity, bytes32 entity) internal view returns (CombatData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 matchEntity, bytes32 entity) internal view returns (CombatData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 matchEntity,
    bytes32 entity,
    int32 health,
    int32 maxHealth,
    int32 strength,
    int32 counterStrength,
    int32 minRange,
    int32 maxRange,
    CombatArchetypes archetype
  ) internal {
    bytes memory _staticData = encodeStatic(
      health,
      maxHealth,
      strength,
      counterStrength,
      minRange,
      maxRange,
      archetype
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 matchEntity,
    bytes32 entity,
    int32 health,
    int32 maxHealth,
    int32 strength,
    int32 counterStrength,
    int32 minRange,
    int32 maxRange,
    CombatArchetypes archetype
  ) internal {
    bytes memory _staticData = encodeStatic(
      health,
      maxHealth,
      strength,
      counterStrength,
      minRange,
      maxRange,
      archetype
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 matchEntity, bytes32 entity, CombatData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.health,
      _table.maxHealth,
      _table.strength,
      _table.counterStrength,
      _table.minRange,
      _table.maxRange,
      _table.archetype
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 matchEntity, bytes32 entity, CombatData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.health,
      _table.maxHealth,
      _table.strength,
      _table.counterStrength,
      _table.minRange,
      _table.maxRange,
      _table.archetype
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      int32 health,
      int32 maxHealth,
      int32 strength,
      int32 counterStrength,
      int32 minRange,
      int32 maxRange,
      CombatArchetypes archetype
    )
  {
    health = (int32(uint32(Bytes.getBytes4(_blob, 0))));

    maxHealth = (int32(uint32(Bytes.getBytes4(_blob, 4))));

    strength = (int32(uint32(Bytes.getBytes4(_blob, 8))));

    counterStrength = (int32(uint32(Bytes.getBytes4(_blob, 12))));

    minRange = (int32(uint32(Bytes.getBytes4(_blob, 16))));

    maxRange = (int32(uint32(Bytes.getBytes4(_blob, 20))));

    archetype = CombatArchetypes(uint8(Bytes.getBytes1(_blob, 24)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CombatData memory _table) {
    (
      _table.health,
      _table.maxHealth,
      _table.strength,
      _table.counterStrength,
      _table.minRange,
      _table.maxRange,
      _table.archetype
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 matchEntity, bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 matchEntity, bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    int32 health,
    int32 maxHealth,
    int32 strength,
    int32 counterStrength,
    int32 minRange,
    int32 maxRange,
    CombatArchetypes archetype
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(health, maxHealth, strength, counterStrength, minRange, maxRange, archetype);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int32 health,
    int32 maxHealth,
    int32 strength,
    int32 counterStrength,
    int32 minRange,
    int32 maxRange,
    CombatArchetypes archetype
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      health,
      maxHealth,
      strength,
      counterStrength,
      minRange,
      maxRange,
      archetype
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 matchEntity, bytes32 entity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = matchEntity;
    _keyTuple[1] = entity;

    return _keyTuple;
  }
}
