// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { EncodedLengths } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { createTemplate } from "base/libraries/templates/createTemplate.sol";
import { UnitTypes, CombatArchetypes, TerrainTypes, StructureTypes } from "base/codegen/common.sol";

import { Combat, StructureType, Untraversable, Capturable, Charger, ChargeCap, Factory, SpawnPoint, GoldOnKill } from "base/codegen/index.sol";

bytes32 constant templateId = "SpawnSettlement";
bytes32 constant SpawnSettlementTemplateId = templateId;
uint256 constant LENGTH = 9;

function SpawnSettlementTemplate() {
  bytes32[] memory tableIds = new bytes32[](LENGTH);
  bytes32[] memory encodedLengthss = new bytes32[](LENGTH);
  bytes[] memory staticDatas = new bytes[](LENGTH);
  bytes[] memory dynamicDatas = new bytes[](LENGTH);

  bytes memory staticData;
  EncodedLengths encodedLengths;
  bytes memory dynamicData;

  tableIds[0] = ResourceId.unwrap(Combat._tableId);
  tableIds[1] = ResourceId.unwrap(StructureType._tableId);
  tableIds[2] = ResourceId.unwrap(Untraversable._tableId);
  tableIds[3] = ResourceId.unwrap(Capturable._tableId);
  tableIds[4] = ResourceId.unwrap(Charger._tableId);
  tableIds[5] = ResourceId.unwrap(ChargeCap._tableId);
  tableIds[6] = ResourceId.unwrap(Factory._tableId);
  tableIds[7] = ResourceId.unwrap(SpawnPoint._tableId);
  tableIds[8] = ResourceId.unwrap(GoldOnKill._tableId);

  (staticData, encodedLengths, dynamicData) = Combat.encode(500000, 500000, 0, 0, 0, 0, CombatArchetypes(uint8(11)));
  staticDatas[0] = staticData;
  encodedLengthss[0] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[0] = dynamicData;

  (staticData, encodedLengths, dynamicData) = StructureType.encode(StructureTypes(uint8(2)));
  staticDatas[1] = staticData;
  encodedLengthss[1] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[1] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Untraversable.encode(true);
  staticDatas[2] = staticData;
  encodedLengthss[2] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[2] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Capturable.encode(false);
  staticDatas[3] = staticData;
  encodedLengthss[3] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[3] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Charger.encode(50);
  staticDatas[4] = staticData;
  encodedLengthss[4] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[4] = dynamicData;

  (staticData, encodedLengths, dynamicData) = ChargeCap.encode(500, 0);
  staticDatas[5] = staticData;
  encodedLengthss[5] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[5] = dynamicData;
  bytes32[] memory factory_prototypeIds = new bytes32[](7);
  factory_prototypeIds[0] = 0x53776f7264736d616e0000000000000000000000000000000000000000000000;
  factory_prototypeIds[1] = 0x50696b656d616e00000000000000000000000000000000000000000000000000;
  factory_prototypeIds[2] = 0x50696c6c61676572000000000000000000000000000000000000000000000000;
  factory_prototypeIds[3] = 0x4172636865720000000000000000000000000000000000000000000000000000;
  factory_prototypeIds[4] = 0x4b6e696768740000000000000000000000000000000000000000000000000000;
  factory_prototypeIds[5] = 0x4272757465000000000000000000000000000000000000000000000000000000;
  factory_prototypeIds[6] = 0x4361746170756c74000000000000000000000000000000000000000000000000;
  int32[] memory factory_goldCosts = new int32[](7);
  factory_goldCosts[0] = 100;
  factory_goldCosts[1] = 150;
  factory_goldCosts[2] = 200;
  factory_goldCosts[3] = 250;
  factory_goldCosts[4] = 400;
  factory_goldCosts[5] = 550;
  factory_goldCosts[6] = 700;
  (staticData, encodedLengths, dynamicData) = Factory.encode(factory_prototypeIds, factory_goldCosts);
  staticDatas[6] = staticData;
  encodedLengthss[6] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[6] = dynamicData;

  (staticData, encodedLengths, dynamicData) = SpawnPoint.encode(true);
  staticDatas[7] = staticData;
  encodedLengthss[7] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[7] = dynamicData;

  (staticData, encodedLengths, dynamicData) = GoldOnKill.encode(500);
  staticDatas[8] = staticData;
  encodedLengthss[8] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[8] = dynamicData;

  createTemplate(templateId, tableIds, staticDatas, encodedLengthss, dynamicDatas);
}
