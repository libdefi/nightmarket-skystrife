// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { EncodedLengths } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { createTemplate } from "base/libraries/templates/createTemplate.sol";
import { UnitTypes, CombatArchetypes, TerrainTypes, StructureTypes } from "base/codegen/common.sol";

import { StructureType, Charger, ChargeCap, Capturable, Untraversable, Combat } from "base/codegen/index.sol";

bytes32 constant templateId = "GoldMine";
bytes32 constant GoldMineTemplateId = templateId;
uint256 constant LENGTH = 6;

function GoldMineTemplate() {
  bytes32[] memory tableIds = new bytes32[](LENGTH);
  bytes32[] memory encodedLengthss = new bytes32[](LENGTH);
  bytes[] memory staticDatas = new bytes[](LENGTH);
  bytes[] memory dynamicDatas = new bytes[](LENGTH);

  bytes memory staticData;
  EncodedLengths encodedLengths;
  bytes memory dynamicData;

  tableIds[0] = ResourceId.unwrap(StructureType._tableId);
  tableIds[1] = ResourceId.unwrap(Charger._tableId);
  tableIds[2] = ResourceId.unwrap(ChargeCap._tableId);
  tableIds[3] = ResourceId.unwrap(Capturable._tableId);
  tableIds[4] = ResourceId.unwrap(Untraversable._tableId);
  tableIds[5] = ResourceId.unwrap(Combat._tableId);

  (staticData, encodedLengths, dynamicData) = StructureType.encode(StructureTypes(uint8(4)));
  staticDatas[0] = staticData;
  encodedLengthss[0] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[0] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Charger.encode(50);
  staticDatas[1] = staticData;
  encodedLengthss[1] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[1] = dynamicData;

  (staticData, encodedLengths, dynamicData) = ChargeCap.encode(1000, 0);
  staticDatas[2] = staticData;
  encodedLengthss[2] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[2] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Capturable.encode(true);
  staticDatas[3] = staticData;
  encodedLengthss[3] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[3] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Untraversable.encode(true);
  staticDatas[4] = staticData;
  encodedLengthss[4] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[4] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Combat.encode(150000, 150000, 0, 0, 0, 0, CombatArchetypes(uint8(12)));
  staticDatas[5] = staticData;
  encodedLengthss[5] = EncodedLengths.unwrap(encodedLengths);
  dynamicDatas[5] = dynamicData;

  createTemplate(templateId, tableIds, staticDatas, encodedLengthss, dynamicDatas);
}
