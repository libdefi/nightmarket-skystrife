# Sky Strife Contracts

This package contains all of the contracts that make up a Sky Strife [MUD](https://mud.dev) World.

## Requirements

- Node `>v18.16`
- `pnpm`
- [Foundry](https://book.getfoundry.sh/getting-started/installation)

## Overview

- The [mud.config.ts](./mud.config.ts) file gives a high-level overview of the tables the World is composed of. All tables here are documented, as well as the fields that make up each table.
- The [`systems`](./src/systems) folder contains all of the contracts that compose the Sky Strife World. Every player action is routed through a publicly available System.
- [PostDeploy.s.sol](./script/PostDeploy.s.sol) is the script that is run after the contracts are deployed. This is where the initial state of the World is set up.
- [`templates.ts`](./ts/templates/templates.ts) contains the data for in-game entities like Units, Structures, and Terrain. By modifying this file, rebuilding, and deploying, you can change Sky Strife's gameplay.
- The [`codegen`](./src/codegen/) folder contains contracts generated by MUD and the templating system. You should never need to modify this directly.

## Match Systems

There are only 3 systems that handle all gameplay within a Sky Strife match:

[MoveSystem](./src/systems/MoveSystem.sol): handles attacking with and moving units
[BuildSystem](./src/systems/BuildSystem.sol): handles building new units
[LobbySystem](./src/systems/LobbySystem.sol): handles "readying" for a match beforing it begins

## Scripting

Sky Strife has built-in tooling for creating/running Forge scripts that access live Worlds.

Scripts are useful for:

- prototyping systems with live data
- manually editing data in a live World

To create a new migration, run `pnpm migration:new`.

To run any migration run `pnpm migration:run`. When running, it will prompt you for what chain you want to point to as well as whether or not you want to broadcast the created transactions.

A new migration looks like this:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "forge-std/Script.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { IWorld } from "../src/codegen/world/IWorld.sol";

// table imports
import { MatchConfig } from "../src/codegen/index.sol";

contract NewMigration is Script {
  function run(address worldAddress) external {
    IWorld world = IWorld(worldAddress);
    StoreSwitch.setStoreAddress(worldAddress);

    uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
    vm.startBroadcast(deployerPrivateKey);

    // your code here

    vm.stopBroadcast();
  }
}
```
