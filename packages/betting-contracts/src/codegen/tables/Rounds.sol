// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct RoundsData {
  address roundCreator;
  uint256 betPeriod;
  bool matchFinished;
  uint256 betAmount;
  address[] playerAddresses;
  uint8[] teamIds;
  string title;
}

library Rounds {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Rounds", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000526f756e647300000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0055040314200120000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, uint256, bool, uint256, address[], uint8[], string)
  Schema constant _valueSchema = Schema.wrap(0x00550403611f601fc362c5000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "roundId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "roundCreator";
    fieldNames[1] = "betPeriod";
    fieldNames[2] = "matchFinished";
    fieldNames[3] = "betAmount";
    fieldNames[4] = "playerAddresses";
    fieldNames[5] = "teamIds";
    fieldNames[6] = "title";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get roundCreator.
   */
  function getRoundCreator(bytes32 roundId) internal view returns (address roundCreator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get roundCreator.
   */
  function _getRoundCreator(bytes32 roundId) internal view returns (address roundCreator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set roundCreator.
   */
  function setRoundCreator(bytes32 roundId, address roundCreator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((roundCreator)), _fieldLayout);
  }

  /**
   * @notice Set roundCreator.
   */
  function _setRoundCreator(bytes32 roundId, address roundCreator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((roundCreator)), _fieldLayout);
  }

  /**
   * @notice Get betPeriod.
   */
  function getBetPeriod(bytes32 roundId) internal view returns (uint256 betPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get betPeriod.
   */
  function _getBetPeriod(bytes32 roundId) internal view returns (uint256 betPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set betPeriod.
   */
  function setBetPeriod(bytes32 roundId, uint256 betPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((betPeriod)), _fieldLayout);
  }

  /**
   * @notice Set betPeriod.
   */
  function _setBetPeriod(bytes32 roundId, uint256 betPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((betPeriod)), _fieldLayout);
  }

  /**
   * @notice Get matchFinished.
   */
  function getMatchFinished(bytes32 roundId) internal view returns (bool matchFinished) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get matchFinished.
   */
  function _getMatchFinished(bytes32 roundId) internal view returns (bool matchFinished) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set matchFinished.
   */
  function setMatchFinished(bytes32 roundId, bool matchFinished) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((matchFinished)), _fieldLayout);
  }

  /**
   * @notice Set matchFinished.
   */
  function _setMatchFinished(bytes32 roundId, bool matchFinished) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((matchFinished)), _fieldLayout);
  }

  /**
   * @notice Get betAmount.
   */
  function getBetAmount(bytes32 roundId) internal view returns (uint256 betAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get betAmount.
   */
  function _getBetAmount(bytes32 roundId) internal view returns (uint256 betAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set betAmount.
   */
  function setBetAmount(bytes32 roundId, uint256 betAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((betAmount)), _fieldLayout);
  }

  /**
   * @notice Set betAmount.
   */
  function _setBetAmount(bytes32 roundId, uint256 betAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((betAmount)), _fieldLayout);
  }

  /**
   * @notice Get playerAddresses.
   */
  function getPlayerAddresses(bytes32 roundId) internal view returns (address[] memory playerAddresses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get playerAddresses.
   */
  function _getPlayerAddresses(bytes32 roundId) internal view returns (address[] memory playerAddresses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set playerAddresses.
   */
  function setPlayerAddresses(bytes32 roundId, address[] memory playerAddresses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((playerAddresses)));
  }

  /**
   * @notice Set playerAddresses.
   */
  function _setPlayerAddresses(bytes32 roundId, address[] memory playerAddresses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((playerAddresses)));
  }

  /**
   * @notice Get the length of playerAddresses.
   */
  function lengthPlayerAddresses(bytes32 roundId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get the length of playerAddresses.
   */
  function _lengthPlayerAddresses(bytes32 roundId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get an item of playerAddresses.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemPlayerAddresses(bytes32 roundId, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of playerAddresses.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemPlayerAddresses(bytes32 roundId, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Push an element to playerAddresses.
   */
  function pushPlayerAddresses(bytes32 roundId, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to playerAddresses.
   */
  function _pushPlayerAddresses(bytes32 roundId, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from playerAddresses.
   */
  function popPlayerAddresses(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 20);
  }

  /**
   * @notice Pop an element from playerAddresses.
   */
  function _popPlayerAddresses(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 20);
  }

  /**
   * @notice Update an element of playerAddresses at `_index`.
   */
  function updatePlayerAddresses(bytes32 roundId, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of playerAddresses at `_index`.
   */
  function _updatePlayerAddresses(bytes32 roundId, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get teamIds.
   */
  function getTeamIds(bytes32 roundId) internal view returns (uint8[] memory teamIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Get teamIds.
   */
  function _getTeamIds(bytes32 roundId) internal view returns (uint8[] memory teamIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Set teamIds.
   */
  function setTeamIds(bytes32 roundId, uint8[] memory teamIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((teamIds)));
  }

  /**
   * @notice Set teamIds.
   */
  function _setTeamIds(bytes32 roundId, uint8[] memory teamIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((teamIds)));
  }

  /**
   * @notice Get the length of teamIds.
   */
  function lengthTeamIds(bytes32 roundId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of teamIds.
   */
  function _lengthTeamIds(bytes32 roundId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of teamIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTeamIds(bytes32 roundId, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Get an item of teamIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTeamIds(bytes32 roundId, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Push an element to teamIds.
   */
  function pushTeamIds(bytes32 roundId, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to teamIds.
   */
  function _pushTeamIds(bytes32 roundId, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from teamIds.
   */
  function popTeamIds(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop an element from teamIds.
   */
  function _popTeamIds(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update an element of teamIds at `_index`.
   */
  function updateTeamIds(bytes32 roundId, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of teamIds at `_index`.
   */
  function _updateTeamIds(bytes32 roundId, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get title.
   */
  function getTitle(bytes32 roundId) internal view returns (string memory title) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Get title.
   */
  function _getTitle(bytes32 roundId) internal view returns (string memory title) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Set title.
   */
  function setTitle(bytes32 roundId, string memory title) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, bytes((title)));
  }

  /**
   * @notice Set title.
   */
  function _setTitle(bytes32 roundId, string memory title) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, bytes((title)));
  }

  /**
   * @notice Get the length of title.
   */
  function lengthTitle(bytes32 roundId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of title.
   */
  function _lengthTitle(bytes32 roundId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of title.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTitle(bytes32 roundId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of title.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTitle(bytes32 roundId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to title.
   */
  function pushTitle(bytes32 roundId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Push a slice to title.
   */
  function _pushTitle(bytes32 roundId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from title.
   */
  function popTitle(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Pop a slice from title.
   */
  function _popTitle(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Update a slice of title at `_index`.
   */
  function updateTitle(bytes32 roundId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of title at `_index`.
   */
  function _updateTitle(bytes32 roundId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 roundId) internal view returns (RoundsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 roundId) internal view returns (RoundsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 roundId,
    address roundCreator,
    uint256 betPeriod,
    bool matchFinished,
    uint256 betAmount,
    address[] memory playerAddresses,
    uint8[] memory teamIds,
    string memory title
  ) internal {
    bytes memory _staticData = encodeStatic(roundCreator, betPeriod, matchFinished, betAmount);

    EncodedLengths _encodedLengths = encodeLengths(playerAddresses, teamIds, title);
    bytes memory _dynamicData = encodeDynamic(playerAddresses, teamIds, title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 roundId,
    address roundCreator,
    uint256 betPeriod,
    bool matchFinished,
    uint256 betAmount,
    address[] memory playerAddresses,
    uint8[] memory teamIds,
    string memory title
  ) internal {
    bytes memory _staticData = encodeStatic(roundCreator, betPeriod, matchFinished, betAmount);

    EncodedLengths _encodedLengths = encodeLengths(playerAddresses, teamIds, title);
    bytes memory _dynamicData = encodeDynamic(playerAddresses, teamIds, title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 roundId, RoundsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.roundCreator,
      _table.betPeriod,
      _table.matchFinished,
      _table.betAmount
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.playerAddresses, _table.teamIds, _table.title);
    bytes memory _dynamicData = encodeDynamic(_table.playerAddresses, _table.teamIds, _table.title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 roundId, RoundsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.roundCreator,
      _table.betPeriod,
      _table.matchFinished,
      _table.betAmount
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.playerAddresses, _table.teamIds, _table.title);
    bytes memory _dynamicData = encodeDynamic(_table.playerAddresses, _table.teamIds, _table.title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (address roundCreator, uint256 betPeriod, bool matchFinished, uint256 betAmount) {
    roundCreator = (address(Bytes.getBytes20(_blob, 0)));

    betPeriod = (uint256(Bytes.getBytes32(_blob, 20)));

    matchFinished = (_toBool(uint8(Bytes.getBytes1(_blob, 52))));

    betAmount = (uint256(Bytes.getBytes32(_blob, 53)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (address[] memory playerAddresses, uint8[] memory teamIds, string memory title) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    playerAddresses = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    teamIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    title = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (RoundsData memory _table) {
    (_table.roundCreator, _table.betPeriod, _table.matchFinished, _table.betAmount) = decodeStatic(_staticData);

    (_table.playerAddresses, _table.teamIds, _table.title) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 roundId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address roundCreator,
    uint256 betPeriod,
    bool matchFinished,
    uint256 betAmount
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(roundCreator, betPeriod, matchFinished, betAmount);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    address[] memory playerAddresses,
    uint8[] memory teamIds,
    string memory title
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(playerAddresses.length * 20, teamIds.length * 1, bytes(title).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    address[] memory playerAddresses,
    uint8[] memory teamIds,
    string memory title
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((playerAddresses)), EncodeArray.encode((teamIds)), bytes((title)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address roundCreator,
    uint256 betPeriod,
    bool matchFinished,
    uint256 betAmount,
    address[] memory playerAddresses,
    uint8[] memory teamIds,
    string memory title
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(roundCreator, betPeriod, matchFinished, betAmount);

    EncodedLengths _encodedLengths = encodeLengths(playerAddresses, teamIds, title);
    bytes memory _dynamicData = encodeDynamic(playerAddresses, teamIds, title);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 roundId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = roundId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
